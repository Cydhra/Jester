//! This module contains a trait for a Diffie-Hellman-key-exchange protocol and a default implementation for all
//! implementors of `PrimeField` as defined in `jester_algebra`.

use rand::{CryptoRng, RngCore};

use jester_algebra::prime::PrimeField;

/// A trait representing the symmetric key exchange scheme proposed by Diffie, Hellman and Merkle. Each party
/// generates an asymmetrical key pair using `generate_asymmetrical_key_pair` and then exchanges public keys. Then
/// all parties can generate the shared key using `generate_shared_secret`. If more than two parties are involved,
/// multiple rounds of sharing are required. The trait defines three associated types for its keys. In most
/// implementations they will be the same type, however it enforces the correct use of keys through type safety.
pub trait DiffieHellmanKeyExchangeScheme {
    /// The type of publicly known values exchanged before or during the protocol, like the generator and its powers.
    type PublicKey;

    /// The private values that shall not be shared during the protocol.
    type PrivateKey;

    /// The shared key this protocol generates. It is the common secret of all parties involved.
    type SharedKey;

    /// Generate a random number a and raise the `generator` to the power of `a`. This number is the private key part
    /// and the calculated power is the public part of the Diffie-Hellman-Key-Exchange.
    /// # Parameters
    /// - `rng`: a cryptographically secure random number generator.
    /// - `generator`: the domain parameters used during the protocol. In case of original Diffie-Hellman-Exchange,
    /// it is a generator for the prime field used.
    fn generate_asymmetrical_key_pair<R>(
        rng: &mut R,
        generator: &Self::PublicKey,
    ) -> (Self::PrivateKey, Self::PublicKey)
    where
        R: RngCore + CryptoRng;

    /// Generate the shared secret from the public key received by the other party.
    /// # Parameters
    /// - `private_key` the private key that was generated by `generate_public_key`.
    /// - `partner_key` the public key received by the other party.
    fn generate_shared_secret(
        private_key: &Self::PrivateKey,
        partner_key: &Self::PublicKey,
    ) -> Self::SharedKey;
}

/// Implementation of the `DiffieHellmanKeyExchangeScheme` for all `PrimeField` types.
impl<T> DiffieHellmanKeyExchangeScheme for T
where
    T: PrimeField,
{
    type PublicKey = T;
    type PrivateKey = T;
    type SharedKey = T;

    fn generate_asymmetrical_key_pair<R>(
        rng: &mut R,
        generator: &Self::PublicKey,
    ) -> (Self::PrivateKey, Self::PublicKey)
    where
        R: RngCore + CryptoRng,
    {
        let a = Self::PublicKey::generate_random_member(rng);
        (
            a.clone(),
            generator
                .as_uint()
                .modpow(&a.as_uint(), &T::field_prime().as_uint())
                .into(),
        )
    }

    fn generate_shared_secret(
        private_key: &Self::PrivateKey,
        partner_key: &Self::PublicKey,
    ) -> Self::SharedKey {
        partner_key
            .as_uint()
            .modpow(&private_key.as_uint(), &T::field_prime().as_uint())
            .into()
    }
}
